# Объектно-ориентированное программирование: это парадигма программирования
# Структура создания ООП class 'name':
#               \tАтрибуты и методы

# class Animals:
# class users:
class Car_Ford:
    # Атрибуты создаются так:
    # Атрибуты определяют ключевые свойства класса его черты
    model = 'Ford'
    name = 'Fokus'
    make = 2013

    # Методы создаются так:
    # Методами называются функции внутри класса
    def start(self):
        print("Заводим двигатель")

    def stop(self):
        print("Отключаем двигатель")


# Дальше для того, чтобы использовать классы нужно как и с функцией создать или призвать его
carA = Car_Ford()
carB = Car_Ford()
# Для вызова объектов внутри класса используется конструкция Экземпляк.Объект
# Обращаемся к методу
carB.start()
# Обращаемся к атрибуту
print(carB.model)


# Существуют локальные и глобальные атрибуты которые могут наследовать как все экземпляры класса
# так и быть уникальными для каждого
class Car_New:
    # Глобальный атрибут по умолчанию
    car_count = 0

    # Метод в который помещены локальные настраиваемые атрибуты
    def start(self, name, make, model):
        print("Двигатель заведен")
        self.name = name
        self.make = make
        self.model = model
        # Не найдя car_count внутри функции start Питон пойдет по правилу LEGB на уровель выше(E)
        Car_New.car_count += 1


# self дает понять куда мы хатим засунуть атрибуты а именно себе то  есть экземпляру
car_A = Car_New()
# Присваиваем индивидуальные значения с помощью локальных атрибутов
car_A.start("Corrola", "Toyota", 2015)
print(car_A.name)
print(car_A.car_count)


# Подробнее о методах класса
# Пример статичного метода
class Car_New2:

    @staticmethod
    def get_class_details():
        print("Это класс Car")


# При таком раскладе не нужно создавать экземпляр
Car_New2.get_class_details()


# Конструктор — это специальный метод, который вызывается по умолчанию когда вы создаете объект класса.
# Для создания конструктора нужно создать метод с ключевым словом __init__
class Car:
    # создание атрибутов класса
    car_count = 0

    # создание методов класса
    def __init__(self):
        Car.car_count += 1
        print(Car.car_count)


# Модификаторы доступа к классу
# публичный — public;
# приватный — private;
# защищенный — protected.
class CarAad:
    def __init__(self):
        print("Двигатель заведен")
        self.name = "corolla"
        self.__make = "toyota"
        self._model = 1999


# .__Приватный
# .Публичный
# ._Защищенный
car_a = CarAad()
# Так как атрибут публичный все окей
print(car_a.name)
# Так как атрибут приватный то выдаст ошибку
print(car_a.make)
# Наследование...
# Полиморфизм...
# Инкапсуляция...
