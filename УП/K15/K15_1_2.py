# Выполнил:Степаненко Кирилл
# Группа: П2-18

# Подготовить инструкцию по использованию модулей Counter.
# класс collections.Counter() предназначен для удобных и быстрых подсчетов
# количества появлений неизменяемых элементов в последовательностях.

# rom collections import Counter
# cnt = Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
# dict(cnt)
# {'blue': 3, 'red': 2, 'green': 1}

# Синтаксис

import collections
# cnt = collections.Counter([iterable-or-mapping])
# Параметры:
# iterable-or-mapping - итерируемая последовательность или словарь.
# Возвращаемое значение:
# объект Counter().

# Описание:
# Класс Counter() модуля collections - это подкласс словаря dict
# для подсчета хеш-объектов (неизменяемых, каких как строки, числа, кортежи
# и т.д.).Это коллекция, в которой элементы хранятся в виде словарных ключей,
# а их счетчики хранятся в виде значений словаря.
# Счетчик может быть любым целочисленным значением, включая ноль или
# отрицательное число.
# Класс collections.Counter() похож на мультимножества в других языках
# программирования.
# Элементы считываются из итерируемой последовательности, инициализируются
# из другого словаря или счетчика Counter():

# from collections import Counter

# новый пустой счетчик
# cnt = Counter()
# новый счетчик из последовательности
# cnt = Counter('gallahad')
# новый счетчик из словаря
# cnt = Counter({'red': 4, 'blue': 2})
# новый счетчик из ключевых слов 'args'
# cnt = Counter(cats=4, dogs=8)
# Счетчики collections.Counter() имеют интерфейс словаря, за исключением
# того,
# что они возвращают 0 для отсутствующих элементов вместо вызова #исключения
# KeyError:
# cnt = Counter(['eggs', 'ham'])
# cnt['bacon']
# 0
# Установка счетчика в ноль не удаляет элементы из счетчика. Используйте
# инструкцию del, чтобы полностью удалить ключ счетчика:
# запись счетчика с нулевым счетом
# cnt['sausage'] = 0
# удаление счетчика с нулевым счетом
# del cnt['sausage']
# В качестве подкласса dict(), класс Counter() унаследовал возможность
# запоминания порядка вставки.
# Математические операции над объектами Counter() также сохраняют #порядок.
# Результаты упорядочены в соответствии с тем, когда элемент сначала
# встречается в левом операнде, а затем в порядке, в котором #встречается
# правый операнд.
# Атрибуты и методы класса Counter():

# Метод cnt.elements()

from collections import Counter
cnt = Counter(a=0, b=2, c=3, )
sorted(cnt.elements())
# ['b', 'b', 'c', 'c', 'c']

# Метод cnt.most_common() возвращает список из n наиболее #распространенных
# элементов и их количество от наиболее распространенных до наименее.
# Если n опущено или None, метод cnt.most_common() возвращает все #элементы
# в счетчике.Элементы с равным количеством упорядочены в порядке, в #котором они
# встречаются первыми:

from collections import Counter
Counter('Assistance').most_common(2)
# [('s', 3), ('a', 2)]

# Метод cnt.subtract() вычитает элементы текущего счетчика cnt и #итерируемой
# последовательности или другого словаря или другого счетчика #Counter().
# Подобно методу словаря dict.update(), но вычитает количество #(значения
# ключей), а не заменяет их.
# Значения ключей как у счетчика так и у словаря могут быть нулевыми #или отрицательными.
from collections import Counter
c = Counter(a=0, b=4)
d = Counter(a=1, b=2)
c.subtract(d)
c
# Counter({'a': -1, 'b': 2})

# Метод cnt.update() складывает элементы текущего счетчика cnt и #итерируемой
# последовательности или другого словаря или другого счетчика #Counter().
# Подобно методу словаря dict.update(), но складывает количество #(значения ключей), а не заменяет их.
# Кроме того, ожидается, что итерация будет последовательностью #элементов,
# а не последовательностью двойных кортежей (key, value).

from collections import Counter
c = Counter(a=1, b=8, c=6)
d = Counter(a=1, b=2, c=3)
c.update(d)
c
# Counter({'a': 2, 'b': 10, 'c': 9, })
# Пример:
from collections import Counter
s1 = 'aabbbcccdeff'
c1 = Counter(s1)
print("c1 :", c1)
# Счетчик, используемый в Списке для поиска частот всех его уникальных
# элементов списка
L1 = [1, 2, 1, 1, 4, 4, 4, 5, 6, 6, 3, 3, 0, 0]
t1 = Counter(L1)
print("t1 :", t1)
# c1 : Counter({'b': 3, 'c': 3, 'a': 2, 'f': 2, 'e': 1, 'd': 1})
# t1 : Counter({1: 3, 4: 3, 0: 2, 3: 2, 6: 2, 2: 1, 5: 1}) 