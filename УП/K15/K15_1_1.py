# Выполнил:Степаненко Кирилл
# Группа: П2-18

# Класс deque() модуля collections в Python.

# Двусторонняя очередь в Python.
# Класс collections.deque() это обобщение стеков и очередей и представляет собой
# двустороннюю очередь. Двусторонняя очередь deque() поддерживает
# поточно-ориентированные, эффективные по памяти операции добавления и
# извлечения элементов последовательности с любой стороны с примерно одинаковой
# производительностью O(1) в любом направлении.

# Списки поддерживают аналогичные операции, но они оптимизирован только для
# быстрых операций с последовательностями фиксированной длины и требуют затрат
# O(n) на перемещение памяти для операций pop(0) и insert(0, v), которые
# изменяют как размер, так и положение базового представления данных.

# Синтаксис:
# import collections

# dq = collections.deque([iterable[, maxlen]])

# Возвращаемое значение:
# новый объект deque().

# Описание:
# Класс deque() модуля collections возвращает новый объект deque(),
# инициализированный слева направо данными из итерируемой последовательности
# iterable.

# При создании объекта очереди класс использует метод dq.append() для добавления
# элементов из итерации iterable. Если итерация не указана, новая очередь deque()
# будет пуста.

from collections import deque
dq = deque('abcd')
dq
print(dq)
print()

# Если аргумент maxlen не указан или равен None, количество хранимых записей в
# объекте deque() может увеличиваться до произвольной длины. В противном случае,
# объект deque() ограничивает количество хранимых элементов в своем контейнере
# максимальной длиной maxlen.

# При добавлении новых элементов, когда заполнение очереди deque() становится
# больше значения maxlen, избыточное количество элементов удаляется/сбрасывается
# с противоположного конца. Заполнение очереди на определенную длину
# обеспечивают функциональность, аналогичную команде bash tail в Unix.
# Такое поведение полезно для отслеживания транзакций и других пулов данных,
# где интерес представляют только самые последние изменения или действия.

# Атрибуты и методы класса Deque:

# Метод dq.append() добавляет x к правой стороне (в конец) контейнера deque().

dq.append('123')
print(dq)
print()

# Метод dq.appendleft() добавляет x к левой стороне (в начало) контейнера deque().

dq.appendleft('456')
print(dq)
print()

# Метод dq.copy() создает мелкую копию контейнера deque().

dq_copy = dq.copy()
print(dq_copy)
print()

# Метод dq.clear() удаляет все элементы из контейнера deque(),
# оставляя его длиной 0.

dq_copy.clear()
print(dq_copy)
print()

# Метод dq.count() подсчитывает количество элементовконтейнера
# deque(), равное значению x.

dq.append('456')
print(dq.count('456'))
print()

# Метод dq.extend() расширяет правую сторону (с конца) контейнера
# deque(), добавляя элементы из итерируемого аргумента iterable.

dq.extend('12gf')
print(dq)
print()

# Метод dq.extendleft() расширяет левую сторону (с начала) контейнера
# deque(), добавляя элементы из итерируемого аргумента iterable.

dq.extendleft('45zv')
print(dq)
print()

# Метод dq.index() вернет позицию (индекс) первого совпадения значения
# аргумента x в контейнере deque(), расположенного после необязательного
# аргумента start и до необязательного аргумента stop.

print(dq.index('4', 1))
print()

# Метод dq.insert() вставляет значение аргумента x в позицию i контейнера
# deque().

# Если вставка значение аргумента x приведет к тому, что ограниченный контейнер
# deque() выйдет за пределы maxlen, будет вызвано исключение IndexError.

dq.insert(2, 'dc')
print(dq)

# Метод dq.pop() удаляет и возвращает элемент с правой стороны (с конца)
# контейнера deque(). Если элементы отсутствуют, возникает ошибка IndexError.

dq.pop()
print(dq)
print()

# Метод dq.popleft() удаляет и возвращает элемент с левой стороны (с начала)
# контейнера deque(). Если элементы отсутствуют, возникает ошибка IndexError.

print(dq.popleft())
print(dq)
print()

# Метод dq.remove() удаляет первое вхождение значения value в контейнер
# deque(). Если значение value не найдено, возникает ошибка IndexError.

dq.remove('1')
print(dq)
print()

# Метод dq.reverse() разворачивает элементы контейнера deque() на месте
# и возвращает None.

dq.reverse()
print(dq)
print()

# Метод dq.rotate() разворачивает контейнер deque() на n шагов вправо. Если
# аргумент n имеет отрицательное значение, то разворачивает контейнер налево.

# Когда контейнер не пуст, вращение на один шаг вправо эквивалентно
# dq.appendleft(d.pop()), а вращение на один шаг влево эквивалентно
# dq.append(d.popleft()).

dq.rotate(3)
print(dq)
dq.rotate(-5)
print(dq)
print()

# Свойство dq.maxlen() возвращает максимальный размер maxlen контейнера deque(),
# если параметр maxlen не задан, то возвращает None.

# Пример исользования
deq = deque()
x = input()
# добавлять в обратном порядке до 1-го вхождения ',' и в конце
# вывыести содержимое
while x != '.':
    deq.appendleft(x)
    x = input()
print(deq)