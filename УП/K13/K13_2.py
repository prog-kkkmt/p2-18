# Именованные кортежи в Python.
# Именованные кортежи присваивают имя каждому значению элемента в кортеже #и тем самым создают более читаемый код.
# Они могут использоваться везде, где используются обычные кортежи и #добавляют возможность доступа к полям по
# имени вместо индекса позиции.
# Синтаксис:
# import collections
# ntuple = collections.namedtuple(typename, field_names, *, \
#                               	rename=False, defaults=None, module=None)
# Параметры:
#   typename - строка, имя именованного кортежа,
#   field_names - последовательность строк, имена элементов кортежа,
#   rename - bool, авто-переименование повторяющихся имен элементов,
#   defaults=None - итерируемая последовательность, значения по умолчанию #имен кортежа,
#   module=None - атрибут __module__ именованного кортежа.
# Возвращаемое значение: новый подкласс кортежа с именем typename.
# Описание:
# Класс namedtuple() модуля collections возвращает новый подкласс кортежа #с именем typename. Новый подкласс
# используется для создания объектов, похожих на кортежи, которые имеют #индексируемые и итерируемые поля, доступные
# для поиска по атрибутам. Экземпляры подкласса также имеют полезную строку #документации с typename и field_names,
# а так же метод __repr__(), который перечисляет содержимое кортежа в #формате name=value.
# Имена полей field_names представляют собой последовательность строк, #таких как ['x', 'y']. В качестве альтернативы,
# field_names может быть одной строкой, в которой каждое имя поля разделено #пробелами и/или запятыми, например,
# 'x y' или 'x, y'.
# Для имен полей (элементов кортежа) может использоваться любой #действительный идентификатор Python, за исключением
# имен, начинающихся с подчеркивания. Допустимые идентификаторы состоят из #букв, цифр и символов подчеркивания,
# но не начинаются с цифры или символа подчеркивания и не могут быть #ключевыми словами, такими как class, for,
# return, global, pass и т. д.
# Если аргумент rename=True, то недопустимые имена полей автоматически #заменяются позиционными именами. Например
# ['abc', 'def', 'ghi', 'abc'] преобразуется в ['abc', '_1', 'ghi', '_3'], # последовательностью. Поскольку аргумента со значением
# по умолчанию должны идти после любых обязательных #аргументов, то #значения по умолчанию будут применяются к #самым
# правым параметрам. Например, если имена полей #именованного кортежа это #['x', 'y', 'z'], а значения по #умолчанию
# (1, 2), то тогда x будет обязательным аргументом, y по #умолчанию будет #1, а z #будет 2.
# Если аргумент module определен, то атрибуту именованного #кортежа #__module__ присваивается значение module.
# Экземпляры именованных кортежей не имеют словарей, поэтому они #легковесны #и требуют не больше памяти, чем обычные
# кортежи.
# Пример

from collections import namedtupl
Point = namedtuple('Point', ['x', 'y'])

# создаем с позиционным или именованным параметром

p = Point(11, y=22)

# можно обращаться по индексу
# как к обычному кортежу

print(p[0] + p[1])

# 33
# распаковать как обычный кортеж

x, y = p
print(x, y)

# (11, 22)
# поля также доступны по названию

print(p.x + p.y)

# 33
# человеко-читаемый __repr__

print(p)

# Именованные кортежи поддерживают функцию getattr():

print(getattr(p, 'x'))

# Атрибуты и методы класса namedtuple():
# Метод ntuple._make() создает новый экземпляр класса namedtuple() из #существующей последовательности или
# итерации iterable.

t = [11, 22]
print(Point._make(t))

# Метод ntuple._asdict() вернет новый словарь dict, который отображает имена #полей в соответствии с их значениями:

p = Point(x=11, y=22)
print(p._asdict())

# Метод ntuple._replace() вернет новый экземпляр именованного кортежа, #заменив указанные поля новыми значениями:

p = Point(x=11, y=22)
print(p._replace(x=33))

# Свойство ntuple._fields вернет кортеж строк, перечисляющий имена полей. #Полезно для самоанализа и для создания
# новых именованных типов кортежей из существующих именованных кортежей.

print(p._fields)
Color = namedtuple('Color', 'red green blue')
Pixel = namedtuple('Pixel', Point._fields + Color._fields)
print(Pixel(11, 22, 128, 255, 0))

# Свойство ntuple._field_defaults вернет словарь, который сопоставляет #имена полей со значениями по умолчанию.

Account = namedtuple('Account', ['type', 'balance'], defaults=[0])
print(Account._field_defaults)
print(Account('premium'))

# Примеры использования именованного кортежа:
# Вот как добавить вычисляемое поле и формат печати фиксированной ширины:

class Box:

    def __init__(self):
        self.__weight = 0

    @property
    def weight(self):
        return self.__weight

    @weight.setter
    def weight(self, new_weight):
        if new_weight < 0:
            raise ValueError('negative weight')

        self.__weight = new_weight

b = Box()
b.weight = 100
print(b.weight)
b.weight = -100
print(b.weight)