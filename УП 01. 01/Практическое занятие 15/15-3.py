# Выполнил: Короленко Иван Романович
# Студент: ККМТ П2-18

# Задание 1. Функция argv модуля sys в Python.

# Функция argv модуля sys в Python.
import sys
import os

print('Список аргументов')
print(sys.argv)
print('Исходные байты')
print([os.fsencode(arg) for arg in sys.argv])

# Задание 2. Имя используемой OS.

# Функция для Unix sys.platform,
# Функция для Windows sys.getwindowsversion(),
'''
sys.platform:
Функция sys.platform возвращает строку, которая содержит идентификатор платформы,
который можно использовать, например, для добавления компонентов,специфичных для платформы.
Для систем Unix, за исключением Linux и AIX, это имя ОС в нижнем регистре,
возвращаемое командой bash uname -s с добавлением первой части версии,
возвращаемой командой uname -r. Например 'sunos5' или 'freebsd8'.
Поэтому, рекомендуется использовать следующую идиому:
'''
# if sys.platform.startswith('freebsd'):
# elif sys.platform.startswith('linux'):
# elif sys.platform.startswith('aix'):

# Задание 3. Различные сведения о версии Python.
'''
Содержание:
Свойство sys.copyright,
Свойство sys.version,
Свойство sys.api_version,
Свойство sys.version_info,
Свойство sys.implementation,
Свойство sys.hexversion,
Свойство sys.winver.

sys.copyright:
Переменная sys.copyright возвращает строку, содержащая авторские права, относящиеся к интерпретатору Python.

sys.version:
Переменная sys.version возвращает строку, содержащую номер версии интерпретатора Python плюс дополнительную информацию 
о номере сборки и используемом компиляторе.

Данная строка отображается при запуске интерактивного переводчика. Не извлекайте информацию из нее, лучше используйте 
sys.version_info и функции, предоставляемые модулем platform.

sys.api_version:
Переменная sys.api_version возвращает версию API языка C для этого интерпретатора Python. Программисты могут 
использовать ее при отладке конфликтов версий между Python и модулями расширения.

sys.version_info:
Переменная sys.api_version возвращает кортеж, содержащий пять компонентов номера версии:

major,
minor,
micro,
releaselevel,
serial.
Все значения, кроме releaselevel, являются целыми числами.

Значения releaselevel:

'alpha',
'beta',
'candidate'
'final'.
Компоненты также могут быть доступны по имени, sys.version_info[0] что эквивалентно sys.version_info.major и так далее.

sys.implementation:
Атрибут sys.implementation представляет собой объект, содержащий информацию о реализации текущего запущенного 
интерпретатора Python.
Следующие атрибуты должны существовать во всех реализациях Python.

name - это идентификатор реализации, например "cpython". Фактическая строка определяется реализацией Python,
но она гарантированно будет строчной.

version - это именованный кортеж, в том же формате, что и sys.version_info.
Он представляет собой версию реализации Python. Значение version отличается от конкретной версии языка Python,
которой соответствует текущий работающий интерпретатор. Например, для PyPy 1.8 sys.implementation.version может
быть sys.version_info (1, 8, 0, 'final', 0),
тогда как sys.version_info будет sys.version_info (2, 7, 2, 'final', 0).
Для CPython они имеют одинаковое значение, так как это эталонная реализация.

hexversion - это версия реализации в шестнадцатеричном формате, например sys.hexversion.

cache_tag - это тег, используемый механизмом импорта в именах файлов кэшируемых модулей.
По соглашению, это будет составная часть имени и версии реализации, например, "cpython-38".
Хотя реализация Python может использовать другое значение, если это уместно. Если для cache_tag установлено значение 
None, это означает, что кэширование модуля должно быть отключено.

Атрибут sys.implementation может содержать дополнительные атрибуты, специфичные для реализации Python.
Эти нестандартные атрибуты должны начинаться с подчеркивания и здесь не описаны. Независимо от содержимого 
sys.implementation не
изменится ни во время выполнения интерпретатора, ни между версиями реализации. Однако, может измениться между версиями 
языка Python.

sys.hexversion:
Значение sys.hexversion содержит номер версии, закодированный как одно целое число.
Оно гарантированно увеличивается с каждой версией, включая надлежащую поддержку выпусков.
Например, чтобы проверить, что интерпретатор Python имеет версию не ниже 3.5.2, используйте:
'''
# if sys.hexversion >= 0x030502F0:
# используйте дополнительные функции
# else:
# используйте альтернативную реализацию
# или предупредите пользователя
'''
Значение sys.hexversion это шестнадцатеричный номер версии и представляет собой результат передачи его встроенной 
функции hex().
Для более удобного получения той же самой информации может использоваться именованный кортеж, возвращаемый 
sys.version_info.


sys.winver:
Номер версии, используемый для формирования ключей реестра на платформах Windows.
Значение хранится как строковый ресурс 1000 в DLL-библиотеке Python.
Обычно это первые три символа, возвращаемые sys.version. Значение sys.winver представлен в модуле sys в ознакомительных 
целях, изменение этого значения не влияет на ключи реестра, используемые Python.
'''

# Задание 4. Каталоги и пути интерпретатора Python.
'''
Установка специфичных каталогов и путей для программы.
Следующие переменные модуля sys предоставляют информацию о каталогах и путях интерпретатора Python из кода.

Содержание:
Специфичный для программы каталог Python sys.prefix,
Каталог установки Python sys.base_prefix,
Каталог для конкретной программы sys.exec_prefix,
Каталог базовой установки Python sys.base_exec_prefix,
Путь исполняемого файла интерпретатора Python sys.executable,
Имя каталога библиотеки для конкретной платформы sys.platlibdir.

sys.prefix:
Атрибут sys.prefix это строка, предоставляет специфичный для площадки префикс каталога,
в котором установлены независимые от платформы файлы Python. По умолчанию, это строка '/usr/local'.

Значение sys.prefix устанавливается во время сборки Python с помощью аргумента --prefix для скрипта configure,
например $ ./configure --prefix=/opt/python-3.x.x/". Основная коллекция модулей библиотеки Python установлена в
каталоге prefix/lib/pythonX.Y, а независимые от платформы заголовочные файлы (все, кроме pyconfig.h) хранятся в
prefix/include/pythonX.Y, где XY - номер версии Python, например 3.7.

Примечание. Если запущена виртуальная среда, это значение будет изменено в site.py для указания на виртуальную среду.
Значение для установки Python по-прежнему будет доступно через base_prefix.


sys.base_prefix:
Атрибут sys.base_prefix устанавливается при запуске Python перед запуском site.py то же значение, что и атрибут 
sys.prefix.
Если не работает в виртуальной среде, значения останутся прежними. Если site.py обнаружит, что используется 
виртуальная среда,
то значения sys.prefix и sys.exec_prefix будут изменены на значения установки виртуальной среды, тогда как 
sys.base_prefix и
sys.base_exec_prefix останутся указывать на базовую установку Python (ту, из которой была создана виртуальная среда).


sys.exec_prefix:
Атрибут sys.exec_prefix это строка, задает префикс каталога для конкретной программы,
где установлены зависящие от платформы файлы Python. По умолчанию это '/usr/local'.

Значение sys.prefix устанавливается во время сборки Python с помощью аргумента --exec-prefix для скрипта configure.
В частности, все файлы конфигурации (например, заголовочный файл pyconfig.h) установлены в каталоге 
exec_prefix/lib/pythonX.Y/config,
а модули разделяемой библиотеки установлены в exec_prefix/lib/pythonX.Y/lib-dynload, где XY номер версии Python, 
например 3.7.

Примечание. Если запущена виртуальная среда, то значение sys.exec_prefix будет изменено в site.py для указания на 
виртуальную среду.
Значение базовой установки Python по-прежнему будет доступно через атрибут sys.base_exec_prefix.


sys.base_exec_prefix:
Атрибут sys.exec_prefix устанавливает при запуске Python до запуска site.py то же значение, что и sys.exec_prefix.
Если программа не работает в виртуальной среде, то значения останутся прежними. Если site.py обнаружит,
что используется виртуальная среда, то значения sys.prefix и sys.exec_prefix будут изменены на значения установки 
виртуальной среды,
тогда как sys.base_prefix и sys.base_exec_prefix останутся указывать на базовую установку Python (ту, из которой 
была создана
виртуальная среда).


sys.executable:
Атрибут sys.executable это строка, задающая абсолютный путь исполняемого двоичного файла для интерпретатора Python 
в системах,
где это имеет смысл. Если Python не может получить реальный путь к своему исполняемому файлу, sys.executable будет 
пустой строкой
или None.


sys.platlibdir:
Атрибут sys.exec_prefix это имя каталога библиотеки для конкретной платформы. Он используется для построения пути к
стандартной библиотеке и путей установленных модулей расширения. (Новое в Python 3.9.)

На большинстве платформ он равен lib. В Fedora и SuSE на 64-битных платформах он равен lib64, что дает следующие 
пути sys.path
(где X.Y - версия Python major.minor):

/usr/lib64/pythonX.Y/: Стандартная библиотека (например, os.py модуля os),
/usr/lib64/pythonX.Y/lib-dynload/: модули расширения языка C стандартной библиотеки (например, модуль errno, точное имя
файла зависит от платформы),
/usr/lib/pythonX.Y/site-packages/ (всегда используйте lib, а не sys.platlibdir): сторонние модули,
/usr/lib64/pythonX.Y/site-packages/: модули расширения языка C сторонних пакетов.
'''

# Задание 5. Объекты stdin, stdout, stderr модуля sys в Python.

os = sys.platform
if os == "win32":
    # Работаем с реестром Windows
    import _winreg
elif os.startswith('linux'):
    # Выполняем Linux комманду
    import subprocess

    subprocess.Popen(["ls, -l"])

# Задание 6. Функция exit() модуля sys в Python.

sys.exit([arg])

# Функция exit() модуля sys - выход из Python. Она реализуется путем вызова исключения SystemExit,
# поэтому выполняются действия по очистке, указанные в предложениях
# finally операторов try и можно перехватить попытку выхода на внешнем уровне.

# Параметры:
# arg - статус выхода, по умолчанию 0
# Возвращаемое значение:
# целое число, указывающее статус выхода.

# Необязательный аргумент arg может быть целым числом, указывающим статус выхода
# (по умолчанию равен нулю) или другим типом объекта. Если это целое число, ноль считается "успешным завершением",
# а любое ненулевое значение считается "ненормальным завершением" и т.п.

# Большинство систем требуют, чтобы arg находился в диапазоне 0 - 127,
# и в противном случае дают неопределенные результаты.
# Некоторые системы имеют соглашение о назначении определенных значений определенным кодам выхода, но они, как правило,
# недостаточно развиты. Программы Unix обычно используют 2 для ошибок
# синтаксиса командной строки и 1 для всех других видов ошибок.
# Если передается объект другого типа, то None эквивалентен передаче нуля, а любой другой объект выводится на sys.stderr
# и приводитк коду выхода 1.
# В частности, sys.exit() - это быстрый способ выйти из программы при возникновении ошибки.

'''
Существует много других значений и методов в модуле sys.
Теперь вы знаете, как выйти из программы Python,
как получить информацию о платформе, работать с аргументами, переданными командной строке, и многому другому.
'''
